/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as SettingsImport } from './routes/settings'
import { Route as SearchImport } from './routes/search'
import { Route as RegisterImport } from './routes/register'
import { Route as LoginImport } from './routes/login'
import { Route as IndexImport } from './routes/index'
import { Route as UsersUserIdIndexImport } from './routes/users/$userId/index'
import { Route as ExperiencesExperienceIdIndexImport } from './routes/experiences/$experienceId/index'

// Create/Update Routes

const SettingsRoute = SettingsImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => rootRoute,
} as any)

const SearchRoute = SearchImport.update({
  id: '/search',
  path: '/search',
  getParentRoute: () => rootRoute,
} as any)

const RegisterRoute = RegisterImport.update({
  id: '/register',
  path: '/register',
  getParentRoute: () => rootRoute,
} as any)

const LoginRoute = LoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const UsersUserIdIndexRoute = UsersUserIdIndexImport.update({
  id: '/users/$userId/',
  path: '/users/$userId/',
  getParentRoute: () => rootRoute,
} as any)

const ExperiencesExperienceIdIndexRoute =
  ExperiencesExperienceIdIndexImport.update({
    id: '/experiences/$experienceId/',
    path: '/experiences/$experienceId/',
    getParentRoute: () => rootRoute,
  } as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginImport
      parentRoute: typeof rootRoute
    }
    '/register': {
      id: '/register'
      path: '/register'
      fullPath: '/register'
      preLoaderRoute: typeof RegisterImport
      parentRoute: typeof rootRoute
    }
    '/search': {
      id: '/search'
      path: '/search'
      fullPath: '/search'
      preLoaderRoute: typeof SearchImport
      parentRoute: typeof rootRoute
    }
    '/settings': {
      id: '/settings'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof SettingsImport
      parentRoute: typeof rootRoute
    }
    '/experiences/$experienceId/': {
      id: '/experiences/$experienceId/'
      path: '/experiences/$experienceId'
      fullPath: '/experiences/$experienceId'
      preLoaderRoute: typeof ExperiencesExperienceIdIndexImport
      parentRoute: typeof rootRoute
    }
    '/users/$userId/': {
      id: '/users/$userId/'
      path: '/users/$userId'
      fullPath: '/users/$userId'
      preLoaderRoute: typeof UsersUserIdIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/login': typeof LoginRoute
  '/register': typeof RegisterRoute
  '/search': typeof SearchRoute
  '/settings': typeof SettingsRoute
  '/experiences/$experienceId': typeof ExperiencesExperienceIdIndexRoute
  '/users/$userId': typeof UsersUserIdIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/login': typeof LoginRoute
  '/register': typeof RegisterRoute
  '/search': typeof SearchRoute
  '/settings': typeof SettingsRoute
  '/experiences/$experienceId': typeof ExperiencesExperienceIdIndexRoute
  '/users/$userId': typeof UsersUserIdIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/login': typeof LoginRoute
  '/register': typeof RegisterRoute
  '/search': typeof SearchRoute
  '/settings': typeof SettingsRoute
  '/experiences/$experienceId/': typeof ExperiencesExperienceIdIndexRoute
  '/users/$userId/': typeof UsersUserIdIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/login'
    | '/register'
    | '/search'
    | '/settings'
    | '/experiences/$experienceId'
    | '/users/$userId'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/login'
    | '/register'
    | '/search'
    | '/settings'
    | '/experiences/$experienceId'
    | '/users/$userId'
  id:
    | '__root__'
    | '/'
    | '/login'
    | '/register'
    | '/search'
    | '/settings'
    | '/experiences/$experienceId/'
    | '/users/$userId/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  LoginRoute: typeof LoginRoute
  RegisterRoute: typeof RegisterRoute
  SearchRoute: typeof SearchRoute
  SettingsRoute: typeof SettingsRoute
  ExperiencesExperienceIdIndexRoute: typeof ExperiencesExperienceIdIndexRoute
  UsersUserIdIndexRoute: typeof UsersUserIdIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  LoginRoute: LoginRoute,
  RegisterRoute: RegisterRoute,
  SearchRoute: SearchRoute,
  SettingsRoute: SettingsRoute,
  ExperiencesExperienceIdIndexRoute: ExperiencesExperienceIdIndexRoute,
  UsersUserIdIndexRoute: UsersUserIdIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/login",
        "/register",
        "/search",
        "/settings",
        "/experiences/$experienceId/",
        "/users/$userId/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/login": {
      "filePath": "login.tsx"
    },
    "/register": {
      "filePath": "register.tsx"
    },
    "/search": {
      "filePath": "search.tsx"
    },
    "/settings": {
      "filePath": "settings.tsx"
    },
    "/experiences/$experienceId/": {
      "filePath": "experiences/$experienceId/index.tsx"
    },
    "/users/$userId/": {
      "filePath": "users/$userId/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
